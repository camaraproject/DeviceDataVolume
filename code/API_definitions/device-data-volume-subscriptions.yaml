openapi: 3.0.3
info:
  title: Device Data Volume Subscriptions
  description: |
    This API enables customers to subscribe to events related to data volume usage thresholds on a device. It supports both request and subscription modes to track remaining data volume.

    # Introduction

    ## Device Data Volume Subscriptions

    API consumers can receive notifications regarding data volume usage thresholds, such as when the remaining data volume reaches 50%, 75%, or 90% of the user's allocated data plan. This is useful for managing data usage and avoiding overage fees.

    # Relevant terms and definitions

    * **Device**: A device refers to any physical entity capable of network communication, identified via an IP address, phone number, or Network Access Identifier.

    # API Functionality

    The API exposes the following capabilities:

    ## Device Data Volume Subscriptions

    These endpoints allow management of subscriptions to data volume usage events. The CAMARA subscription model follows the CloudEvents specification.

    When subscribing, it is mandatory to provide the event `types` related to data volume thresholds you wish to track.

    The following event `types` are managed for this API:
      - `org.camaraproject.device-data-volume-subscriptions.v0.data-50-percent`: Event triggered when 50% of the data plan is consumed.
      - `org.camaraproject.device-data-volume-subscriptions.v0.data-75-percent`: Event triggered when 75% of the data plan is consumed.
      - `org.camaraproject.device-data-volume-subscriptions.v0.data-90-percent`: Event triggered when 90% of the data plan is consumed.
      - `org.camaraproject.device-data-volume-subscriptions.v0.data-exceeded`: Event triggered when the data plan is exceeded.

    Note: Additionally, the following events could be send, which do not require a dedicated subscription:
      - `org.camaraproject.device-data-volume-subscriptions.v0.subscription-started` is sent when the subscription starts.
      - `org.camaraproject.device-data-volume-subscriptions.v0.subscription-updated` is sent when the subscription is updated.
      - `org.camaraproject.device-data-volume-subscriptions.v0.subscription-ended` is sent when the subscription ends.

    It is used in following cases:
      - the subscription expire time (optionally set by the requester) has been reached
      - the maximum number of subscription events (optionally set by the requester) has been reached
      - the subscription was deleted by the requester
      - the Access Token `sinkCredential` (optionally set by the requester) expiration time has been reached
      - the API server has to stop sending notification prematurely

    ### Notification callback

    This endpoint describes the event notification received on subscription listener side when the event occurred.
    As for subscription, detailed description of the event notification is provided in the CAMARA API design guideline document.

    _**WARNING**: This callback endpoint must be exposed on the consumer side as `POST /{$request.body#/sink}`.
      Developers may provide a callback URL on which notifications regarding device data volume events can be received from the service provider.
      If an event occurs the application will send events to the provided webhook - 'sink'._

    # Authorization and authentication

    The "Camara Security and Interoperability Profile" provides details of how an API consumer requests an access token. Please refer to Identity and Consent Management (https://github.com/camaraproject/IdentityAndConsentManagement/) for the released version of the profile.

    The specific authorization flows to be used will be agreed upon during the onboarding process, happening between the API consumer and the API provider, taking into account the declared purpose for accessing the API, whilst also being subject to the prevailing legal framework dictated by local legislation.

    In cases where personal data is processed by the API and users can exercise their rights through mechanisms such as opt-in and/or opt-out, the use of three-legged access tokens is mandatory. This ensures that the API remains in compliance with privacy regulations, upholding the principles of transparency and user-centric privacy-by-design.

    # Identifying the device from the access token

    This API requires the API consumer to identify a device as the subject of the API as follows:
    - When the API is invoked using a two-legged access token, the subject will be identified from the optional `device` object, which therefore MUST be provided.
    - When a three-legged access token is used however, this optional identifier MUST NOT be provided, as the subject will be uniquely identified from the access token.

    This approach simplifies API usage for API consumers using a three-legged access token to invoke the API by relying on the information that is associated with the access token and was identified during the authentication process.

    ## Error handling:

    - If the subject cannot be identified from the access token and the optional `device` object is not included in the request, then the server will return an error with the `422 MISSING_IDENTIFIER` error code.

    - If the subject can be identified from the access token and the optional `device` object is also included in the request, then the server will return an error with the `422 UNNECESSARY_IDENTIFIER` error code. This will be the case even if the same device is identified by these two methods, as the server is unable to make this comparison.

    # Additional CAMARA error responses

    The list of error codes in this API specification is not exhaustive. Therefore the API specification may not document some non-mandatory error statuses as indicated in `CAMARA API Design Guide`.

    Please refer to the `CAMARA_common.yaml` of the Commonalities Release associated to this API version for a complete list of error responses. The applicable Commonalities Release can be identified in the `API Readiness Checklist` document associated to this API version.

    As a specific rule, error `501 - NOT_IMPLEMENTED` can be only a possible error response if it is explicitly documented in the API.

    # Further info and support

    (FAQs will be added in a later version of the documentation)

  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: wip
  x-camara-commonalities: 0.6

externalDocs:
  description: Project documentation at CAMARA
  url: https://github.com/camaraproject/DeviceDataVolume

servers:
  - url: "{apiRoot}/device-data-volume-subscriptions/vwip"
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root

tags:
  - name: Device Data Volume Subscriptions
    description: Manage subscriptions to device data volume usage events.

paths:
  /subscriptions:
    post:
      tags:
        - Device data volume subscription
      summary: "Create a device data volume event subscription"
      description: Create a subscription for data volume usage events
      operationId: createDeviceDataVolumeSubscription
      parameters:
        - $ref: "#/components/parameters/x-correlator"
      security:
        - openId:
            - device-data-volume-subscriptions:org.camaraproject.device-data-volume-subscriptions.v0.data-50-percent:create
            - device-data-volume-subscriptions:org.camaraproject.device-data-volume-subscriptions.v0.data-75-percent:create
            - device-data-volume-subscriptions:org.camaraproject.device-data-volume-subscriptions.v0.data-90-percent:create
            - device-data-volume-subscriptions:org.camaraproject.device-data-volume-subscriptions.v0.data-exceeded:create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubscriptionRequest"
        required: true
      callbacks:
        notifications:
          "{$request.body#/sink}":
            post:
              summary: "notifications callback"
              description: |
                Important: this endpoint is to be implemented by the API consumer.
                The Data Volume server will call this endpoint whenever a data volume usage event occurs.
              operationId: postNotification
              parameters:
                - $ref: "#/components/parameters/x-correlator"
              requestBody:
                required: true
                content:
                  application/cloudevents+json:
                    schema:
                      $ref: "#/components/schemas/CloudEvent"
                    examples:
                      data-50-percent:
                        $ref: "#/components/examples/DATA_50_PERCENT"
                      data-75-percent:
                        $ref: "#/components/examples/DATA_75_PERCENT"
                      data-90-percent:
                        $ref: "#/components/examples/DATA_90_PERCENT"
                      data-exceeded:
                        $ref: "#/components/examples/DATA_EXCEEDED"
                      subscription-started:
                        $ref: "#/components/examples/SUBSCRIPTION_STARTED"
                      subscription-updated:
                        $ref: "#/components/examples/SUBSCRIPTION_UPDATED"
                      subscription-ended:
                        $ref: "#/components/examples/SUBSCRIPTION_ENDED"
              responses:
                "204":
                  description: Successful notification
                  headers:
                    x-correlator:
                      $ref: "#/components/headers/x-correlator"
                "400":
                  $ref: "#/components/responses/Generic400"
                "401":
                  $ref: "#/components/responses/Generic401"
                "403":
                  $ref: "#/components/responses/Generic403"
                "410":
                  $ref: "#/components/responses/Generic410"
                "429":
                  $ref: "#/components/responses/Generic429"
              security:
                - {}
                - notificationsBearerAuth: []

      responses:
        "201":
          description: Created
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
              examples:
                Successful Subscription Creation:
                  $ref: "#/components/examples/SUBSCRIPTION_CREATION"
                Successful Subscription Creation With Device Disambiguation:
                  $ref: "#/components/examples/SUBSCRIPTION_CREATION_WITH_DEVICE_DISAMBIGUATION"
        "202":
          description: Request accepted to be processed. It applies for async creation process.
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionAsync"
        "400":
          $ref: "#/components/responses/CreateSubscriptionBadRequest400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/SubscriptionPermissionDenied403"
        "409":
          $ref: "#/components/responses/Generic409"
        "422":
          $ref: "#/components/responses/CreateSubscriptionUnprocessableEntity422"
        "429":
          $ref: "#/components/responses/Generic429"
    get:
      tags:
        - Device data volume subscription
      summary: "Retrieve a list of device data volume subscriptions"
      description: Retrieve a list of data volume usage event subscription(s)
      operationId: retrieveDeviceDataVolumeSubscriptionList
      parameters:
        - $ref: "#/components/parameters/x-correlator"
      security:
        - openId:
            - device-data-volume-subscriptions:read
      responses:
        "200":
          description: List of event subscription details
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                items:
                  $ref: "#/components/schemas/Subscription"
              examples:
                Subscription List:
                  $ref: "#/components/examples/SUBSCRIPTION_LIST"
                Empty Subscription List:
                  $ref: "#/components/examples/EMPTY_SUBSCRIPTION_LIST"
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"

  /subscriptions/{subscriptionId}:
    get:
      tags:
        - Device data volume subscription
      summary: "Retrieve a device data volume event subscription"
      description: Retrieve a specific subscription by ID
      operationId: retrieveDeviceDataVolumeSubscription
      security:
        - openId:
            - device-data-volume-subscriptions:read
      parameters:
        - $ref: "#/components/parameters/SubscriptionId"
        - $ref: "#/components/parameters/x-correlator"
      responses:
        "200":
          description: OK
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
              examples:
                Active Subscription:
                  $ref: "#/components/examples/ACTIVE_SUBSCRIPTION"
                Active Subscription With Device Disambiguation:
                  $ref: "#/components/examples/ACTIVE_SUBSCRIPTION_WITH_DEVICE_DISAMBIGUATION"
        "400":
          $ref: "#/components/responses/SubscriptionIdRequired400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"

    delete:
      tags:
        - Device data volume subscription
      summary: "Delete a device data volume event subscription"
      operationId: deleteDeviceDataVolumeSubscription
      description: |
        This operation deletes a specific data volume usage subscription by its subscription ID.
        Once deleted, no more notifications will be sent for the corresponding subscription.
      security:
        - openId:
            - device-data-volume-subscriptions:delete
      parameters:
        - $ref: "#/components/parameters/SubscriptionId"
        - $ref: "#/components/parameters/x-correlator"
      responses:
        "204":
          description: No Content - Subscription successfully deleted
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
        "202":
          description: Request accepted to be processed. It applies for async deletion process.
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionAsync"
        "400":
          $ref: "#/components/responses/SubscriptionIdRequired400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"

components:
  securitySchemes:
    openId:
      type: openIdConnect
      openIdConnectUrl: https://example.com/.well-known/openid-configuration
    notificationsBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: "{$request.body#/sinkCredential.credentialType}"
  parameters:
    SubscriptionId:
      name: subscriptionId
      in: path
      description: Subscription identifier that was obtained from the create event subscription operation
      required: true
      schema:
        $ref: "#/components/schemas/SubscriptionId"
    x-correlator:
      name: x-correlator
      in: header
      schema:
        $ref: "#/components/schemas/XCorrelator"
  headers:
    x-correlator:
      schema:
        $ref: "#/components/schemas/XCorrelator"
  schemas:
    XCorrelator:
      description: Correlation id for the different services
      type: string
      pattern: ^[a-zA-Z0-9-_:;.\/<>{}]{0,256}$
      example: "b4333c46-49c0-4f62-80d7-f0ef930f1c46"
    SubscriptionRequest:
      description: The request for creating a event-type event subscription
      type: object
      required:
        - sink
        - protocol
        - config
        - types
      properties:
        protocol:
          $ref: "#/components/schemas/Protocol"
        sink:
          type: string
          format: uri
          pattern: ^https:\/\/.+$
          description: The address to which events shall be delivered using the selected protocol.
          example: "https://endpoint.example.com/sink"
        sinkCredential:
          $ref: "#/components/schemas/SinkCredential"
        types:
          description: |
            Camara Event types eligible to be delivered by this subscription.
            Note: As of now we enforce to have only event type per subscription.
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: "#/components/schemas/SubscriptionEventType"
        config:
          $ref: "#/components/schemas/Config"
      discriminator:
        propertyName: protocol
        mapping:
          HTTP: "#/components/schemas/HTTPSubscriptionRequest"
          MQTT3: "#/components/schemas/MQTTSubscriptionRequest"
          MQTT5: "#/components/schemas/MQTTSubscriptionRequest"
          AMQP: "#/components/schemas/AMQPSubscriptionRequest"
          NATS: "#/components/schemas/NATSSubscriptionRequest"
          KAFKA: "#/components/schemas/ApacheKafkaSubscriptionRequest"

    Protocol:
      type: string
      enum: ["HTTP", "MQTT3", "MQTT5", "AMQP", "NATS", "KAFKA"]
      description: Identifier of a delivery protocol. Only HTTP is allowed for now.
      example: "HTTP"

    Config:
      description: |
        Implementation-specific configuration parameters needed by the subscription manager for acquiring events.
        In CAMARA we have predefined attributes like `subscriptionExpireTime`, `subscriptionMaxEvents`, `initialEvent`
        Specific event type attributes must be defined in `subscriptionDetail`
        Note: if a request is performed for several event type, all subscribed event will use same `config` parameters.
      type: object
      required:
        - subscriptionDetail
      properties:
        subscriptionDetail:
          $ref: "#/components/schemas/SubscriptionDetail"
        subscriptionExpireTime:
          type: string
          format: date-time
          example: 2023-01-17T13:18:23.682Z
          description: The subscription expiration time (in date-time format) requested by the API consumer. Up to API project decision to keep it.
        subscriptionMaxEvents:
          type: integer
          description: Identifies the maximum number of event reports to be generated (>=1) requested by the API consumer - Once this number is reached, the subscription ends. Up to API project decision to keep it.
          minimum: 1
          example: 5
        initialEvent:
          type: boolean
          description: |
            Set to `true` by API consumer if consumer wants to get an event as soon as the subscription is created and current situation reflects event request.
            Example: Consumer request Roaming event. If consumer sets initialEvent to true and device is in roaming situation, an event is triggered
            Up to API project decision to keep it.

    SinkCredential:
      description: A sink credential provides authentication or authorization information necessary to enable delivery of events to a target.
      type: object
      properties:
        credentialType:
          type: string
          enum:
            - PLAIN
            - ACCESSTOKEN
            - REFRESHTOKEN
          description: |
            The type of the credential.
            Note: Type of the credential - MUST be set to ACCESSTOKEN for now
      discriminator:
        propertyName: credentialType
        mapping:
          PLAIN: "#/components/schemas/PlainCredential"
          ACCESSTOKEN: "#/components/schemas/AccessTokenCredential"
          REFRESHTOKEN: "#/components/schemas/RefreshTokenCredential"
      required:
        - credentialType

    PlainCredential:
      type: object
      description: A plain credential for authentication, containing an identifier and a secret.
      allOf:
        - $ref: "#/components/schemas/SinkCredential"
        - type: object
          required:
            - identifier
            - secret
          properties:
            identifier:
              description: The identifier (e.g., username).
              type: string
            secret:
              description: The secret (e.g., password).
              type: string

    AccessTokenCredential:
      type: object
      description: An access token credential for authentication.
      allOf:
        - $ref: "#/components/schemas/SinkCredential"
        - type: object
          properties:
            accessToken:
              description: A previously acquired token for accessing the resource.
              type: string
            accessTokenExpiresUtc:
              type: string
              format: date-time
              description: Expiry time for the access token.
            accessTokenType:
              type: string
              enum:
                - bearer
      required:
        - accessToken
        - accessTokenExpiresUtc
        - accessTokenType

    RefreshTokenCredential:
      type: object
      description: An access token credential with a refresh token.
      allOf:
        - $ref: "#/components/schemas/SinkCredential"
        - type: object
          properties:
            accessToken:
              description: REQUIRED. An access token is a previously acquired token granting access to the target resource.
              type: string
            accessTokenExpiresUtc:
              type: string
              format: date-time
              description: |
                REQUIRED. An absolute (UTC) timestamp at which the token shall be considered expired.
                In the case of an ACCESS_TOKEN_EXPIRED termination reason, implementation should notify the client before the expiration date.
                If the access token is a JWT and registered "exp" (Expiration Time) claim is present, the two expiry times should match.
                It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone.
                Recommended format is yyyy-MM-dd'T'HH:mm:ss.SSSZ (i.e. which allows 2023-07-03T14:27:08.312+02:00 or 2023-07-03T12:27:08.312Z)
              example: "2023-07-03T12:27:08.312Z"
            accessTokenType:
              description: REQUIRED. Type of the access token (See [OAuth 2.0](https://tools.ietf.org/html/rfc6749#section-7.1)).
              type: string
              enum:
                - bearer
            refreshToken:
              description: REQUIRED. An refresh token credential used to acquire access tokens.
              type: string
            refreshTokenEndpoint:
              type: string
              format: uri
              description: REQUIRED. A URL at which the refresh token can be traded for an access token.
      required:
        - accessToken
        - accessTokenExpiresUtc
        - accessTokenType
        - refreshToken
        - refreshTokenEndpoint

    SubscriptionDetail:
      description: The details of the requested device data volume subscription.
      type: object
      properties:
        device:
          $ref: "#/components/schemas/Device"

    Subscription:
      description: Represents a device data volume subscription.
      type: object
      required:
        - sink
        - protocol
        - config
        - types
        - id
        - startsAt
      properties:
        protocol:
          $ref: "#/components/schemas/Protocol"
        sink:
          type: string
          format: uri
          pattern: ^https:\/\/.+$
          description: The address where events will be delivered using the selected protocol.
          example: "https://endpoint.example.com/sink"
        sinkCredential:
          $ref: "#/components/schemas/SinkCredential"
        types:
          description: |
            Camara Event types eligible to be delivered by this subscription for device data volume.
            Note: As of now we enforce to have only event type per subscription.
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: "#/components/schemas/SubscriptionEventType"
        config:
          $ref: "#/components/schemas/Config"
        id:
          $ref: "#/components/schemas/SubscriptionId"
        startsAt:
          type: string
          format: date-time
          description: |
            Date when the event subscription will begin/began
            It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone.
            Recommended format is yyyy-MM-dd'T'HH:mm:ss.SSSZ (i.e. which allows 2023-07-03T14:27:08.312+02:00 or 2023-07-03T12:27:08.312Z)
          example: "2023-07-03T12:27:08.312Z"
        expiresAt:
          type: string
          format: date-time
          description: |
            Date when the event subscription will expire. Only provided when `subscriptionExpireTime` is indicated by API client or Telco Operator has specific policy about that.
            It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone.
            Recommended format is yyyy-MM-dd'T'HH:mm:ss.SSSZ (i.e. which allows 2023-07-03T14:27:08.312+02:00 or 2023-07-03T12:27:08.312Z)
        status:
          type: string
          description: |-
            Current status of the subscription - Management of Subscription State engine is not mandatory for now. Note not all statuses may be considered to be implemented. Details:
              - `ACTIVATION_REQUESTED`: Subscription creation (POST) is triggered but subscription creation process is not finished yet.
              - `ACTIVE`: Subscription creation process is completed. Subscription is fully operative.
              - `INACTIVE`: Subscription is temporarily inactive, but its workflow logic is not deleted.
              - `EXPIRED`: Subscription is ended (no longer active). This status applies when subscription is ended due to `SUBSCRIPTION_EXPIRED` or `ACCESS_TOKEN_EXPIRED` event.
              - `DELETED`: Subscription is ended as deleted (no longer active). This status applies when subscription information is kept (i.e. subscription workflow is no longer active but its meta-information is kept).
          enum:
            - ACTIVATION_REQUESTED
            - ACTIVE
            - EXPIRED
            - INACTIVE
            - DELETED
      discriminator:
        propertyName: protocol
        mapping:
          HTTP: "#/components/schemas/HTTPSubscriptionResponse"
          MQTT3: "#/components/schemas/MQTTSubscriptionResponse"
          MQTT5: "#/components/schemas/MQTTSubscriptionResponse"
          AMQP: "#/components/schemas/AMQPSubscriptionResponse"
          NATS: "#/components/schemas/NATSSubscriptionResponse"
          KAFKA: "#/components/schemas/ApacheKafkaSubscriptionResponse"

    Device:
      description: |
        End-user equipment able to connect to a mobile network. Examples of devices include smartphones or IoT sensors/actuators.
            The developer can choose to provide the below specified device identifiers:
            * `ipv4Address`
            * `ipv6Address`
            * `phoneNumber`
            * `networkAccessIdentifier`
            NOTE1: the network operator might support only a subset of these options. The API invoker can provide multiple identifiers to be compatible across different network operators. In this case the identifiers MUST belong to the same device.
            NOTE2: as for this Commonalities release, we are enforcing that the networkAccessIdentifier is only part of the schema for future-proofing, and CAMARA does not currently allow its use. After the CAMARA meta-release work is concluded and the relevant issues are resolved, its use will need to be explicitly documented in the guidelines.
      type: object
      properties:
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
        networkAccessIdentifier:
          $ref: "#/components/schemas/NetworkAccessIdentifier"
        ipv4Address:
          $ref: "#/components/schemas/DeviceIpv4Addr"
        ipv6Address:
          $ref: "#/components/schemas/DeviceIpv6Address"
      minProperties: 1

    DeviceResponse:
      description: |
        An identifier for the end-user equipment able to connect to the network that the response refers to. This parameter is only returned when the API consumer includes the `device` parameter in their request (i.e. they are using a two-legged access token), and is relevant when more than one device identifier is specified, as only one of those device identifiers is allowed in the response.

        If the API consumer provides more than one device identifier in their request, the API provider must return a single identifier which is the one they are using to fulfil the request, even if the identifiers do not match the same device. API provider does not perform any logic to validate/correlate that the indicated device identifiers match the same device. No error should be returned if the identifiers are otherwise valid to prevent API consumers correlating different identifiers with a given end user.

      allOf:
        - $ref: "#/components/schemas/Device"
        - maxProperties: 1

    PhoneNumber:
      description: A public identifier addressing a telephone subscription. In mobile networks it corresponds to the MSISDN (Mobile Station International Subscriber Directory Number). In order to be globally unique it has to be formatted in international format, according to E.164 standard, prefixed with '+'.
      type: string
      pattern: '^\+[1-9][0-9]{4,14}$'
      example: "+123456789"

    NetworkAccessIdentifier:
      description: A public identifier addressing a subscription in a mobile network. In 3GPP terminology, it corresponds to the GPSI formatted with the External Identifier ({Local Identifier}@{Domain Identifier}). Unlike the telephone number, the network access identifier is not subjected to portability ruling in force, and is individually managed by each operator.
      type: string
      example: "123456789@domain.com"

    DeviceIpv4Addr:
      type: object
      description: |
        The device should be identified by either the public (observed) IP address and port as seen by the application server, or the private (local) and any public (observed) IP addresses in use by the device (this information can be obtained by various means, for example from some DNS servers).

        If the allocated and observed IP addresses are the same (i.e. NAT is not in use) then  the same address should be specified for both publicAddress and privateAddress.

        If NAT64 is in use, the device should be identified by its publicAddress and publicPort, or separately by its allocated IPv6 address (field ipv6Address of the Device object)

        In all cases, publicAddress must be specified, along with at least one of either privateAddress or publicPort, dependent upon which is known. In general, mobile devices cannot be identified by their public IPv4 address alone.
      properties:
        publicAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        privateAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        publicPort:
          $ref: "#/components/schemas/Port"
      anyOf:
        - required: [publicAddress, privateAddress]
        - required: [publicAddress, publicPort]
      example:
        publicAddress: "84.125.93.10"
        publicPort: 59765

    SingleIpv4Addr:
      description: A single IPv4 address with no subnet mask
      type: string
      format: ipv4
      example: "84.125.93.10"

    Port:
      description: TCP or UDP port number
      type: integer
      minimum: 0
      maximum: 65535

    DeviceIpv6Address:
      description: |
        The device should be identified by the observed IPv6 address, or by any single IPv6 address from within the subnet allocated to the device (e.g. adding ::0 to the /64 prefix).
      type: string
      format: ipv6
      example: 2001:db8:85a3:8d3:1319:8a2e:370:7344

    ErrorInfo:
      type: object
      required:
        - message
        - status
        - code
      properties:
        message:
          type: string
          description: A human readable description of what the event represent
        status:
          type: integer
          description: HTTP response status code
        code:
          type: string
          description: Friendly Code to describe the error

    SubscriptionEventType:
      type: string
      description: |
        Event types that can be triggered for device data volume monitoring.
      enum:
        - org.camaraproject.device-data-volume-subscriptions.v0.data-50-percent
        - org.camaraproject.device-data-volume-subscriptions.v0.data-75-percent
        - org.camaraproject.device-data-volume-subscriptions.v0.data-90-percent
        - org.camaraproject.device-data-volume-subscriptions.v0.data-exceeded

    SubscriptionAsync:
      description: Response for a event-type subscription request managed asynchronously (Creation or Deletion)
      type: object
      required:
        - id
      properties:
        id:
          $ref: "#/components/schemas/SubscriptionId"

    SubscriptionId:
      type: string
      format: uuid
      description: Unique identifier for the subscription.
      example: 550e8400-e29b-41d4-a716-446655440000

    NotificationEventType:
      type: string
      description: |
        data-50-percent - Event triggered when the device reaches 50% data usage thresholds of the data plan used.

        data-75-percent - Event triggered when the device reaches 75% data usage thresholds of the data plan used.

        data-90-percent - Event triggered when the device reaches 90% data usage thresholds of the data plan used.

        data-exceeded - Event triggered when the device reaches 100% data usage exceeded of the data plan used.

        subscription-started: Event triggered when the subscription starts.

        subscription-updated - Event triggered when the subscription is updated.

        subscription-ended - Event triggered when the subscription is terminated.
      enum:
        - org.camaraproject.device-data-volume-subscriptions.v0.data-50-percent
        - org.camaraproject.device-data-volume-subscriptions.v0.data-75-percent
        - org.camaraproject.device-data-volume-subscriptions.v0.data-90-percent
        - org.camaraproject.device-data-volume-subscriptions.v0.data-exceeded
        - org.camaraproject.device-data-volume-subscriptions.v0.subscription-started
        - org.camaraproject.device-data-volume-subscriptions.v0.subscription-updated
        - org.camaraproject.device-data-volume-subscriptions.v0.subscription-ended

    CloudEvent:
      description: The notification callback
      required:
        - id
        - source
        - specversion
        - type
        - time
        - data
      properties:
        id:
          type: string
          description: Identifier of this event, that must be unique in the source context.
          example: sd5e-uy52-88t4-za66
        source:
          $ref: "#/components/schemas/Source"
        type:
          $ref: "#/components/schemas/NotificationEventType"
        specversion:
          type: string
          description: Version of the specification to which this event conforms (must be 1.0 if it conforms to cloudevents 1.0.2 version)
          enum:
            - "1.0"
        datacontenttype:
          type: string
          description: 'media-type that describes the event payload encoding, must be "application/json" for CAMARA APIs'
          enum:
            - application/json
        data:
          type: object
          description: Event details payload described in each CAMARA API and referenced by its type
        time:
          $ref: "#/components/schemas/DateTime"
      discriminator:
        propertyName: "type"
        mapping:
          org.camaraproject.device-data-volume-subscriptions.v0.data-50-percent: "#/components/schemas/EventDataUsage50Percent"
          org.camaraproject.device-data-volume-subscriptions.v0.data-75-percent: "#/components/schemas/EventDataUsage75Percent"
          org.camaraproject.device-data-volume-subscriptions.v0.data-90-percent: "#/components/schemas/EventDataUsage90Percent"
          org.camaraproject.device-data-volume-subscriptions.v0.data-exceeded: "#/components/schemas/EventDataUsageExceeded"
          org.camaraproject.device-data-volume-subscriptions.v0.subscription-started: "#/components/schemas/EventSubscriptionStarted"
          org.camaraproject.device-data-volume-subscriptions.v0.subscription-updated: "#/components/schemas/EventSubscriptionUpdated"
          org.camaraproject.device-data-volume-subscriptions.v0.subscription-ended: "#/components/schemas/EventSubscriptionEnded"

    Source:
      type: string
      format: uri-reference
      minLength: 1
      description: |
        Identifies the context in which an event happened - be a non-empty `URI-reference` like:
        - URI with a DNS authority:
          * https://github.com/cloudevents
          * mailto:cncf-wg-serverless@lists.cncf.io
        - Universally-unique URN with a UUID:
          * urn:uuid:6e8bc430-9c3a-11d9-9669-0800200c9a66
        - Application-specific identifier:
          * /cloudevents/spec/pull/123
          * 1-555-123-4567
      example: "https://notificationSendServer12.supertelco.com"

    DateTime:
      type: string
      format: date-time
      description: |
        Timestamp of when the occurrence happened.
        It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have a time zone.
      example: "2018-04-05T17:31:00Z"

    # Event structures for data volume
    EventDataUsage50Percent:
      description: Event structure for data usage 50% threshold alerts
      allOf:
        - $ref: "#/components/schemas/CloudEvent"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/BasicDeviceEventData"

    EventDataUsage75Percent:
      description: Event structure for data usage 75% threshold alerts
      allOf:
        - $ref: "#/components/schemas/CloudEvent"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/BasicDeviceEventData"

    EventDataUsage90Percent:
      description: Event structure for data usage 90% threshold alerts
      allOf:
        - $ref: "#/components/schemas/CloudEvent"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/BasicDeviceEventData"

    EventDataUsageExceeded:
      description: Event structure for data usage exceeding the allocated volume
      allOf:
        - $ref: "#/components/schemas/CloudEvent"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/BasicDeviceEventData"

    EventSubscriptionStarted:
      description: Event structure for event subscription started
      allOf:
        - $ref: "#/components/schemas/CloudEvent"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/SubscriptionStarted"

    SubscriptionStarted:
      description: Event detail structure for subscription started event
      type: object
      required:
        - initiationReason
        - subscriptionId
      properties:
        device:
          $ref: "#/components/schemas/Device"
        initiationReason:
          $ref: "#/components/schemas/InitiationReason"
        subscriptionId:
          $ref: "#/components/schemas/SubscriptionId"
        initiationDescription:
          description: Description about the start of the subscription.
          type: string

    InitiationReason:
      type: string
      description: |
        - SUBSCRIPTION_CREATED - Subscription created by API Server
      enum:
        - SUBSCRIPTION_CREATED

    EventSubscriptionUpdated:
      description: event structure for event subscription updated
      allOf:
        - $ref: "#/components/schemas/CloudEvent"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/SubscriptionUpdated"

    SubscriptionUpdated:
      description: Event detail structure for subscription updated event
      type: object
      required:
        - updateReason
        - subscriptionId
      properties:
        device:
          $ref: "#/components/schemas/Device"
        updateReason:
          $ref: "#/components/schemas/UpdateReason"
        subscriptionId:
          $ref: "#/components/schemas/SubscriptionId"
        updateDescription:
          description: Description about the subscription update.
          type: string

    UpdateReason:
      type: string
      description: |
        - SUBSCRIPTION_ACTIVE - API server transitioned susbcription status to `ACTIVE`
        - SUBSCRIPTION_INACTIVE - API server transitioned susbcription status to `INACTIVE`
      enum:
        - SUBSCRIPTION_ACTIVE
        - SUBSCRIPTION_INACTIVE

    EventSubscriptionEnded:
      description: Event structure for event subscription ends
      allOf:
        - $ref: "#/components/schemas/CloudEvent"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/SubscriptionEnded"

    BasicDeviceEventData:
      description: Event detail structure for basic device events
      type: object
      required:
        - subscriptionId
      properties:
        device:
          $ref: "#/components/schemas/DeviceResponse"
        subscriptionId:
          $ref: "#/components/schemas/SubscriptionId"

    SubscriptionEnded:
      description: |
        Event detail structure for org.camaraproject.device-data-volume-subscriptions.v0.subscription-ended event.
        Note that the device object is defined as optional and will only to be returned if provided in createSubscription.
        If more than one type of device identifier was provided, only one identifier will be returned
        (at implementation choice and with the original value provided in createSubscription).
      type: object
      required:
        - terminationReason
        - subscriptionId
      properties:
        device:
          $ref: "#/components/schemas/Device"
        terminationReason:
          $ref: "#/components/schemas/TerminationReason"
        terminationDescription:
          description: Explanation why a subscription ended or had to end.
          type: string
        subscriptionId:
          $ref: "#/components/schemas/SubscriptionId"

    TerminationReason:
      type: string
      description: |
        - NETWORK_TERMINATED - API server stopped sending notification
        - SUBSCRIPTION_UNPROCESSABLE - Subscription cannot be processed due to some reason. Useful for asynchronous subscription creation.
        - SUBSCRIPTION_EXPIRED - Subscription expire time (optionally set by the requester) has been reached
        - SUBSCRIPTION_DELETED - Subscription was deleted by the requester
        - MAX_EVENTS_REACHED - Maximum number of events (optionally set by the requester) has been reached
        - ACCESS_TOKEN_EXPIRED - Access Token sinkCredential (optionally set by the requester) expiration time has been reached
      enum:
        - MAX_EVENTS_REACHED
        - NETWORK_TERMINATED
        - SUBSCRIPTION_UNPROCESSABLE
        - SUBSCRIPTION_EXPIRED
        - SUBSCRIPTION_DELETED
        - ACCESS_TOKEN_EXPIRED

    HTTPSubscriptionRequest:
      allOf:
        - $ref: "#/components/schemas/SubscriptionRequest"
        - type: object
          properties:
            protocolSettings:
              $ref: "#/components/schemas/HTTPSettings"

    HTTPSubscriptionResponse:
      allOf:
        - $ref: "#/components/schemas/Subscription"
        - type: object
          properties:
            protocolSettings:
              $ref: "#/components/schemas/HTTPSettings"

    HTTPSettings:
      type: object
      properties:
        headers:
          type: object
          description: |-
            A set of key/value pairs that is copied into the HTTP request as custom headers.

            NOTE: Use/Applicability of this concept has not been discussed in Commonalities under the scope of Meta Release v0.4. When required by an API project as an option to meet a UC/Requirement, please generate an issue for Commonalities discussion about it.
          additionalProperties:
            type: string
        method:
          type: string
          description: The HTTP method to use for sending the message.
          enum:
            - POST

    MQTTSubscriptionRequest:
      allOf:
        - $ref: "#/components/schemas/SubscriptionRequest"
        - type: object
          properties:
            protocolSettings:
              $ref: "#/components/schemas/MQTTSettings"

    MQTTSubscriptionResponse:
      allOf:
        - $ref: "#/components/schemas/Subscription"
        - type: object
          properties:
            protocolSettings:
              $ref: "#/components/schemas/MQTTSettings"

    MQTTSettings:
      type: object
      properties:
        topicName:
          type: string
        qos:
          type: integer
          format: int32
        retain:
          type: boolean
        expiry:
          type: integer
          format: int32
        userProperties:
          type: object
      required:
        - topicName

    AMQPSubscriptionRequest:
      allOf:
        - $ref: "#/components/schemas/SubscriptionRequest"
        - type: object
          properties:
            protocolSettings:
              $ref: "#/components/schemas/AMQPSettings"

    AMQPSubscriptionResponse:
      allOf:
        - $ref: "#/components/schemas/Subscription"
        - type: object
          properties:
            protocolSettings:
              $ref: "#/components/schemas/AMQPSettings"

    AMQPSettings:
      type: object
      properties:
        address:
          type: string
        linkName:
          type: string
        senderSettlementMode:
          type: string
          enum: ["settled", "unsettled"]
        linkProperties:
          type: object
          additionalProperties:
            type: string

    ApacheKafkaSubscriptionRequest:
      allOf:
        - $ref: "#/components/schemas/SubscriptionRequest"
        - type: object
          properties:
            protocolSettings:
              $ref: "#/components/schemas/ApacheKafkaSettings"

    ApacheKafkaSubscriptionResponse:
      allOf:
        - $ref: "#/components/schemas/Subscription"
        - type: object
          properties:
            protocolSettings:
              $ref: "#/components/schemas/ApacheKafkaSettings"

    ApacheKafkaSettings:
      type: object
      properties:
        topicName:
          type: string
        partitionKeyExtractor:
          type: string
        clientId:
          type: string
        ackMode:
          type: integer
      required:
        - topicName

    NATSSubscriptionRequest:
      allOf:
        - $ref: "#/components/schemas/SubscriptionRequest"
        - type: object
          properties:
            protocolSettings:
              $ref: "#/components/schemas/NATSSettings"

    NATSSubscriptionResponse:
      allOf:
        - $ref: "#/components/schemas/Subscription"
        - type: object
          properties:
            protocolSettings:
              $ref: "#/components/schemas/NATSSettings"

    NATSSettings:
      type: object
      properties:
        subject:
          type: string
      required:
        - subject

  responses:
    CreateSubscriptionBadRequest400:
      description: Problem with the client request
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 400
                  code:
                    enum:
                      - INVALID_ARGUMENT
                      - OUT_OF_RANGE
                      - INVALID_PROTOCOL
                      - INVALID_CREDENTIAL
                      - INVALID_TOKEN
                      - INVALID_SINK
          examples:
            GENERIC_400_INVALID_ARGUMENT:
              description: Invalid Argument. Generic Syntax Exception
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: Client specified an invalid argument, request body or query param.
            GENERIC_400_OUT_OF_RANGE:
              description: Out of Range. Specific Syntax Exception used when a given field has a pre-defined range or a invalid filter criteria combination is requested
              value:
                status: 400
                code: OUT_OF_RANGE
                message: Client specified an invalid range.
            GENERIC_400_INVALID_PROTOCOL:
              description: Invalid protocol for events subscription management
              value:
                status: 400
                code: INVALID_PROTOCOL
                message: Only HTTP is supported
            GENERIC_400_INVALID_CREDENTIAL:
              description: Invalid sink credential type
              value:
                status: 400
                code: INVALID_CREDENTIAL
                message: Only Access token is supported
            GENERIC_400_INVALID_TOKEN:
              description: Invalid token type for sink credential of type ACCESSTOKEN
              value:
                status: 400
                code: INVALID_TOKEN
                message: Only bearer token is supported
            GENERIC_400_INVALID_SINK:
              description: Invalid sink value
              value:
                status: 400
                code: INVALID_SINK
                message: sink not valid for the specified protocol

    Generic400:
      description: Problem with the client request
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 400
                  code:
                    enum:
                      - INVALID_ARGUMENT
          examples:
            GENERIC_400_INVALID_ARGUMENT:
              description: Invalid Argument. Generic Syntax Exception
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: Client specified an invalid argument, request body or query param.

    SubscriptionIdRequired400:
      description: Problem with the client request
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 400
                  code:
                    enum:
                      - INVALID_ARGUMENT
          examples:
            GENERIC_400_INVALID_ARGUMENT:
              description: Invalid Argument. Generic Syntax Exception
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: Client specified an invalid argument, request body or query param.
            GENERIC_400_SUBSCRIPTION_ID_REQUIRED:
              description: subscription id is required
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Expected property is missing: subscriptionId"

    Generic401:
      description: Authentication problem with the client request
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 401
                  code:
                    enum:
                      - UNAUTHENTICATED
          examples:
            GENERIC_401_UNAUTHENTICATED:
              description: Request cannot be authenticated and a new authentication is required
              value:
                status: 401
                code: UNAUTHENTICATED
                message: Request not authenticated due to missing, invalid, or expired credentials. A new authentication is required.

    Generic403:
      description: Client does not have sufficient permission
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 403
                  code:
                    enum:
                      - PERMISSION_DENIED
          examples:
            GENERIC_403_PERMISSION_DENIED:
              description: Permission denied. OAuth2 token access does not have the required scope or when the user fails operational security
              value:
                status: 403
                code: PERMISSION_DENIED
                message: Client does not have sufficient permissions to perform this action.

    SubscriptionPermissionDenied403:
      description: Client does not have sufficient permission
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 403
                  code:
                    enum:
                      - PERMISSION_DENIED
                      - SUBSCRIPTION_MISMATCH
          examples:
            GENERIC_403_PERMISSION_DENIED:
              description: Permission denied. OAuth2 token access does not have the required scope or when the user fails operational security
              value:
                status: 403
                code: PERMISSION_DENIED
                message: Client does not have sufficient permissions to perform this action.
            GENERIC_403_SUBSCRIPTION_MISMATCH:
              description: Inconsistent access token for requested subscription
              value:
                status: 403
                code: SUBSCRIPTION_MISMATCH
                message: Inconsistent access token for requested events subscription

    Generic404:
      description: Resource Not Found
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 404
                  code:
                    enum:
                      - NOT_FOUND
          examples:
            GENERIC_404_NOT_FOUND:
              description: Resource is not found
              value:
                status: 404
                code: NOT_FOUND
                message: The specified resource is not found.

    Generic409:
      description: Conflict
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 409
                  code:
                    enum:
                      - ALREADY_EXISTS
          examples:
            GENERIC_409_ALREADY_EXISTS:
              description: Trying to create an existing resource
              value:
                status: 409
                code: ALREADY_EXISTS
                message: The resource that a client tried to create already exists.

    Generic410:
      description: Gone
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 410
                  code:
                    enum:
                      - GONE
          examples:
            GENERIC_410_GONE:
              description: Use in notifications flow to allow API Consumer to indicate that its callback is no longer available
              value:
                status: 410
                code: GONE
                message: Access to the target resource is no longer available.

    CreateSubscriptionUnprocessableEntity422:
      description: Unprocessable Entity
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 422
                  code:
                    enum:
                      - MISSING_IDENTIFIER
                      - MULTIEVENT_SUBSCRIPTION_NOT_SUPPORTED
                      - SERVICE_NOT_APPLICABLE
                      - UNNECESSARY_IDENTIFIER
                      - UNSUPPORTED_IDENTIFIER
          examples:
            GENERIC_422_SERVICE_NOT_APPLICABLE:
              description: Service not applicable for the provided identifier
              value:
                status: 422
                code: SERVICE_NOT_APPLICABLE
                message: The service is not available for the provided identifier.
            GENERIC_422_MISSING_IDENTIFIER:
              description: An identifier is not included in the request and the device or phone number identification cannot be derived from the 3-legged access token
              value:
                status: 422
                code: MISSING_IDENTIFIER
                message: The device cannot be identified.
            GENERIC_422_UNSUPPORTED_IDENTIFIER:
              description: None of the provided identifiers is supported by the implementation
              value:
                status: 422
                code: UNSUPPORTED_IDENTIFIER
                message: The identifier provided is not supported.
            GENERIC_422_MULTIEVENT_SUBSCRIPTION_NOT_SUPPORTED:
              description: Multi event types subscription is not supported
              value:
                status: 422
                code: MULTIEVENT_SUBSCRIPTION_NOT_SUPPORTED
                message: Multi event types subscription not managed
            GENERIC_422_UNNECESSARY_IDENTIFIER:
              description: An explicit identifier is provided when a device or phone number has already been identified from the access token
              value:
                status: 422
                code: UNNECESSARY_IDENTIFIER
                message: The device is already identified by the access token.

    Generic429:
      description: Too Many Requests
      headers:
        X-Correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 429
                  code:
                    enum:
                      - QUOTA_EXCEEDED
                      - TOO_MANY_REQUESTS
          examples:
            GENERIC_429_QUOTA_EXCEEDED:
              description: Request is rejected due to exceeding a business quota limit
              value:
                status: 429
                code: QUOTA_EXCEEDED
                message: Out of resource quota.
            GENERIC_429_TOO_MANY_REQUESTS:
              description: Access to the API has been temporarily blocked due to rate or spike arrest limits being reached
              value:
                status: 429
                code: TOO_MANY_REQUESTS
                message: Rate limit reached.

  examples:
    DATA_50_PERCENT:
      value:
        id: "124007"
        source: https://dataUsageServer.supertelco.com
        type: org.camaraproject.device-data-volume-subscriptions.v0.data-50-percent
        specversion: "1.0"
        datacontenttype: application/json
        data:
          device:
            phoneNumber: "+123456789"
          subscriptionId: "dv10-h556-rt89-1406"
        time: "2024-05-12T12:45:23.682Z"

    DATA_75_PERCENT:
      value:
        id: "124008"
        source: https://dataUsageServer.supertelco.com
        type: org.camaraproject.device-data-volume-subscriptions.v0.data-75-percent
        specversion: "1.0"
        datacontenttype: application/json
        data:
          device:
            phoneNumber: "+123456789"
          subscriptionId: "dv10-h556-rt89-1407"
        time: "2024-05-12T14:30:23.682Z"

    DATA_90_PERCENT:
      value:
        id: "124009"
        source: https://dataUsageServer.supertelco.com
        type: org.camaraproject.device-data-volume-subscriptions.v0.data-90-percent
        specversion: "1.0"
        datacontenttype: application/json
        data:
          device:
            phoneNumber: "+123456789"
          subscriptionId: "dv10-h556-rt89-1408"
        time: "2024-05-12T16:15:23.682Z"

    DATA_EXCEEDED:
      value:
        id: "124010"
        source: https://dataUsageServer.supertelco.com
        type: org.camaraproject.device-data-volume-subscriptions.v0.data-exceeded
        specversion: "1.0"
        datacontenttype: application/json
        data:
          device:
            phoneNumber: "+123456789"
          subscriptionId: "dv10-h556-rt89-1409"
        time: "2024-05-12T18:00:23.682Z"

    SUBSCRIPTION_STARTED:
      value:
        id: "124003"
        source: https://dataUsageServer.supertelco.com
        type: org.camaraproject.device-data-volume-subscriptions.v0.subscription-started
        specversion: "1.0"
        datacontenttype: application/json
        data:
          device:
            phoneNumber: "+123456789"
          initiationReason: SUBSCRIPTION_CREATED
          subscriptionId: dv10-h556-rt89-1403
        time: "2024-03-05T15:00:23.682Z"

    SUBSCRIPTION_UPDATED:
      value:
        id: "124003"
        source: https://dataUsageServer.supertelco.com
        type: org.camaraproject.device-data-volume-subscriptions.v0.subscription-updated
        specversion: "1.0"
        datacontenttype: application/json
        data:
          device:
            phoneNumber: "+123456789"
          updateReason: SUBSCRIPTION_ACTIVE
          subscriptionId: dv10-h556-rt89-1403
        time: "2024-03-05T15:00:23.682Z"

    SUBSCRIPTION_ENDED:
      value:
        id: "124003"
        source: https://dataUsageServer.supertelco.com
        type: org.camaraproject.device-data-volume-subscriptions.v0.subscription-ended
        specversion: "1.0"
        datacontenttype: application/json
        data:
          device:
            phoneNumber: "+123456789"
          terminationReason: SUBSCRIPTION_EXPIRED
          subscriptionId: dv10-h556-rt89-1403
        time: "2024-03-05T15:00:23.682Z"

    SUBSCRIPTION_CREATION:
      description: A new subscription has been successfully created
      value:
        protocol: HTTP
        protocolSettings:
          method: POST
        sink: https://endpoint.example.com/sink
        types:
          - org.camaraproject.device-data-volume-subscriptions.v0.data-50-percent
        config:
          subscriptionDetail: {}
          subscriptionExpireTime: '2023-01-17T13:18:23.682Z'
          subscriptionMaxEvents: 5
          initialEvent: true
        id: 550e8400-e29b-41d4-a716-446655440000
        status: ACTIVE
        startsAt: '2023-01-17T12:27:08.312Z'
        expiresAt: '2023-01-17T13:18:23.682Z'

    SUBSCRIPTION_CREATION_WITH_DEVICE_DISAMBIGUATION:
      description: A new subscription has been successfully created
      value:
        protocol: HTTP
        protocolSettings:
          method: POST
        sink: https://endpoint.example.com/sink
        types:
          - org.camaraproject.device-data-volume-subscriptions.v0.data-50-percent
        config:
          subscriptionDetail:
            device:
              phoneNumber: "+123456789"
          subscriptionExpireTime: '2023-01-17T13:18:23.682Z'
          subscriptionMaxEvents: 5
          initialEvent: true
        id: 550e8400-e29b-41d4-a716-446655440000
        status: ACTIVE
        startsAt: '2023-01-17T12:27:08.312Z'
        expiresAt: '2023-01-17T13:18:23.682Z'

    ACTIVE_SUBSCRIPTION:
      description: Details of an active subscription
      value:
        id: 550e8400-e29b-41d4-a716-446655440001
        sink: https://endpoint.example.com/sink
        protocol: HTTP
        types:
          - "org.camaraproject.device-data-volume-subscriptions.v0.data-exceeded"
        config:
          subscriptionDetail: {}
          subscriptionExpireTime: "2024-08-01T14:18:23.682Z"
          subscriptionMaxEvents: 10
          initialEvent: true
        status: ACTIVE
        startsAt: '2023-01-17T12:27:08.312Z'
        expiresAt: '2023-01-17T13:18:23.682Z'

    ACTIVE_SUBSCRIPTION_WITH_DEVICE_DISAMBIGUATION:
      description: Details of an active subscription with device details for disambiguation
      value:
        id: 550e8400-e29b-41d4-a716-446655440001
        sink: https://endpoint.example.com/sink
        protocol: HTTP
        types:
          - "org.camaraproject.device-data-volume-subscriptions.v0.data-exceeded"
        config:
          subscriptionDetail:
            device:
              phoneNumber: "+123456789"
          subscriptionExpireTime: "2024-08-01T14:18:23.682Z"
          subscriptionMaxEvents: 10
          initialEvent: true
        status: ACTIVE
        startsAt: '2023-01-17T12:27:08.312Z'
        expiresAt: '2023-01-17T13:18:23.682Z'

    SUBSCRIPTION_LIST:
      description: A list of API consumer subscriptions. If a 3-legged access token is used, the list is specific to the device associated with that token.
      value:
        - id: 550e8400-e29b-41d4-a716-446655440001
          sink: https://endpoint.example.com/sink
          protocol: HTTP
          types:
            - "org.camaraproject.device-data-volume-subscriptions.v0.data-exceeded"
          config:
            subscriptionDetail: {}
            subscriptionExpireTime: "2024-08-01T14:18:23.682Z"
            subscriptionMaxEvents: 10
            initialEvent: true
          status: ACTIVE
          startsAt: '2023-01-17T12:27:08.312Z'
          expiresAt: '2023-01-17T13:18:23.682Z'

    EMPTY_SUBSCRIPTION_LIST:
      description: The API consumer either has no subscriptions or, if a 3-legged access token is used, has none for the device associated with that token.
      value: []
